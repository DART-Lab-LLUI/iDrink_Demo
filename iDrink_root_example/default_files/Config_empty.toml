###############################################################################
## PROJECT PARAMETERS                                                        ##
###############################################################################


# Configure your project parameters here. 
# 
# IMPORTANT:
# If a parameter is not found here, Pose2Sim will look for its value in the 
# Config.toml file of the level above. This way, you can set global 
# instructions for the Session and alter them for specific Participants or Trials.
#
# If you wish to overwrite a parameter for a specific trial or participant,  
# edit its Config.toml file by uncommenting its key (e.g., [project])
# and editing its value (e.g., frame_range = [10,300]). Or else, uncomment 
# [filtering.butterworth] and set cut_off_frequency = 10, etc.



[project]
frame_rate = [] # fps
frame_range = [] # For example [10,300], or [] for all frames
## N.B.: If you want a time range instead, use frame_range = time_range * frame_rate
## For example if you want to analyze from 0.1 to 2 seconds with a 60 fps frame rate, 
## frame_range = [0.1, 2.0]*frame_rate = [6, 120]

exclude_from_batch = [] # List of trials to be excluded from batch analysis, ['<participant_dir/trial_dir>', 'etc'].
# e.g. ['S00_P00_Participant/S00_P00_T00_StaticTrial', 'S00_P00_Participant/S00_P00_T01_BalancingTrial']
# Take heart, calibration is not that complicated once you get the hang of it!


[calibration]
calibration_type = [] # 'convert' or 'calculate'

   [calibration.convert]
   convert_from = [] # 'qualisys', 'optitrack', vicon', 'opencap', 'easymocap', 'biocv', 'anipose', or 'freemocap'
      [calibration.convert.qualisys]
      binning_factor = [] # Usually 1, except when filming in 540p where it usually is 2
      [calibration.convert.optitrack]  # See readme for instructions
      [calibration.convert.vicon]      # No parameter needed
      [calibration.convert.opencap]    # No parameter needed
      [calibration.convert.easymocap]  # No parameter needed
      [calibration.convert.biocv]      # No parameter needed
      [calibration.convert.anipose]    # No parameter needed
      [calibration.convert.freemocap]  # No parameter needed
  

   [calibration.calculate] 
      # Camera properties, theoretically need to be calculated only once in a camera lifetime
      [calibration.calculate.intrinsics]
      overwrite_intrinsics = [] # overwrite (or not) if they have already been calculated?
      show_detection_intrinsics = [] # true or false (lowercase)
      intrinsics_extension = [] # any video or image extension
      extract_every_N_sec = [] # if video, extract frames every N seconds (can be <1 )
      intrinsics_corners_nb = [] 
      intrinsics_square_size = [] # mm

      # Camera placements, need to be done before every session
      [calibration.calculate.extrinsics]
      calculate_extrinsics = [] # true or false (lowercase) 
      extrinsics_method = [] # 'board', 'scene', 'keypoints'
      # 'board' should be large enough to be detected when laid on the floor. Not recommended.
      # 'scene' involves manually clicking any point of know coordinates on scene. Usually more accurate if points are spread out.
      # 'keypoints' uses automatic pose estimation of a person freely walking and waving arms in the scene. Slighlty less accurate, requires synchronized cameras.
      moving_cameras = false # Not implemented yet

         [calibration.calculate.extrinsics.board]
         show_reprojection_error = [] # true or false (lowercase)
         extrinsics_extension = [] # any video or image extension
         extrinsics_corners_nb = [] # [H,W] rather than [w,h]
         extrinsics_square_size = [] # mm # [h,w] if square is actually a rectangle

         [calibration.calculate.extrinsics.scene]
         show_reprojection_error = [] # true or false (lowercase)
         extrinsics_extension = [] # any video or image extension
         # list of 3D coordinates to be manually labelled on images. Can also be a 2 dimensional plane. 
         # in m -> unlike for intrinsics, NOT in mm!
         object_coords_3d =   []
        
         [calibration.calculate.extrinsics.keypoints]
         # Coming soon!


[pose]
pose_framework = []			  # 'openpose', 'mediapipe', 'alphapose', 'deeplabcut' 
pose_model = [] 			  #With openpose: BODY_25B, BODY_25, BODY_135, COCO, MPII
						      #With mediapipe: BLAZEPOSE. 
						      #With alphapose: HALPE_26, HALPE_68, HALPE_136, COCO_133. 
						      #With deeplabcut: CUSTOM. See example at the end of the file.
							  #Custom Openpose: B25_UPPER_BODY, B25_UPPER_Ears, B25_UPPER
# What follows has not been implemented yet
overwrite_pose = []
openpose_path = [] # only checked if OpenPose is used


[synchronization]
# COMING SOON! 
reset_sync = [] # Recalculate synchronization even if already done
frames = [] # Frames to use for synchronization, should point to a moment with fast motion.
cut_off_frequency = [] # cut-off frequency for a 4th order low-pass Butterworth filter
# Vertical speeds (on X, Y, or Z axis, or 2D speeds)
speed_kind = [] # 'x', 'y', 'z', or '2D'
vmax = [] # px/s
cam1_nb = []
cam2_nb = []
id_kpt = [] # Pour plus tard aller chercher numÃ©ro depuis keypoint name dans skeleton.py. 'RWrist' BLAZEPOSE 16, BODY_25B 10, BODY_25 4 ; 'LWrist' BLAZEPOSE 15, BODY_25B 9, BODY_25 7
weights_kpt = [] # Pris en compte uniquement si on a plusieurs keypoints


[personAssociation]
single_person = [] # false for multi-person analysis (not supported yet), true for only triangulating the main person in scene. 
tracked_keypoint = [] # If the neck is not detected by the pose_model, check skeleton.py 
# and choose a stable point for tracking the person of interest (e.g., 'right_shoulder' with BLAZEPOSE)
reproj_error_threshold_association = [] # px
likelihood_threshold_association = []


[triangulation]
reproj_error_threshold_triangulation = [] # px
likelihood_threshold_triangulation = []
min_cameras_for_triangulation = []
interpolation = [] #linear, slinear, quadratic, cubic, or none
                        # 'none' if you don't want to interpolate missing points
interp_if_gap_smaller_than = [] # do not interpolate bigger gaps
show_interp_indices = [] # true or false (lowercase). For each keypoint, return the frames that need to be interpolated
handle_LR_swap = [] # Better if few cameras (eg less than 4) with risk of limb swapping (eg camera facing sagittal plane), otherwise slightly less accurate and slower
undistort_points = [] # Better if distorted image (parallel lines curvy on the edge or at least one param > 10^-2), but unnecessary (and slightly slower) if distortions are low
make_c3d = [] # save triangulated data in c3d format in addition to trc # Coming soon!


[filtering]
type = [] # butterworth, kalman, gaussian, LOESS, median, butterworth_on_speed
display_figures = [] # true or false (lowercase)

   [filtering.butterworth]
   order = [] 
   cut_off_frequency = [] # Hz
   [filtering.kalman]
   # How much more do you trust triangulation results (measurements), than previous data (process assuming constant acceleration)?
   trust_ratio = [] # = measurement_trust/process_trust ~= process_noise/measurement_noise
   smooth = true # should be true, unless you need real-time filtering
   [filtering.butterworth_on_speed]
   order = [] 
   cut_off_frequency = [] # Hz
   [filtering.gaussian]
   sigma_kernel = [] #px
   [filtering.LOESS]
   nb_values_used = [] # = fraction of data used * nb frames
   [filtering.median]
   kernel_size = []


[markerAugmentation] 
## Only works on BODY_25 and BODY_25B models
participant_height = [] # m
participant_mass = [] # kg


[opensim]
static_trial = ['S00_P00_Participant/S00_P00_T00_StaticTrial']
#            # If this Config.toml file is at the Trial level, set to true or false (lowercase);
#            # At the Participant level, specify the name of the static trial folder name, e.g. ['S00_P00_T00_StaticTrial'];
#            # At the Session level, add participant subdirectory, e.g. ['S00_P00_Participant/S00_P00_T00_StaticTrial', 'S00_P01_Participant/S00_P00_T00_StaticTrial']
opensim_bin_path = []
opensim_model = []
opensim_model_scaled = []
opensim_scaling = []
opensim_inverse_kinematics = []
opensim_marker = []
opensim_marker_filtered = []
opensim_motion = []
opensim_time_range = []

[blender]
##  To make installation easier, a portable version of blender is recmmended.
##  To install the pose2Sim blender Addon, move the addon folder to "...\4.0\scripts\addons"
loc_blender = []  # Path to blender.exe
loc_pose2sim_blender_addon = []  # Path to pose2sim Addon
loc_blender_script = []  # Path to .py file used for blender execution.

[other]
healthy_data = []

# CUSTOM skeleton, if you trained your own DeepLabCut model for example. 
# Make sure the node ids correspond to the column numbers of the 2D pose file, starting from zero.
# 
# If you want to perform inverse kinematics, you will also need to create an OpenSim model
# and add to its markerset the location where you expect the triangulated keypoints to be detected.
# 
# In this example, CUSTOM reproduces the BODY_25B skeleton  (default skeletons are stored in skeletons.py).
# You can create as many custom skeletons as you want, just add them further down and rename them.
# 
# Check your model hierarchy with:  for pre, _, node in RenderTree(model): 
#                                      print(f'{pre}{node.name} id={node.id}')
[pose.B25_UPPER]
name = "CHip"
id = 8
  [[pose.B25_UPPER.children]]
  id = 9
  name = "RHip"
  [[pose.B25_UPPER.children]]
  id = 12
  name = "LHip"
  [[pose.B25_UPPER.children]]
  id = 1
  name = "Neck"
     [[pose.B25_UPPER.children.children]]
     id = 0
     name = "Nose"
     [[pose.B25_UPPER.children.children]]
     id = 2
     name = "RShoulder"
        [[pose.B25_UPPER.children.children.children]]
        id = 3
        name = "RElbow"
           [[pose.B25_UPPER.children.children.children.children]]
           id = 4
           name = "RWrist"
     [[pose.B25_UPPER.children.children]]
     id = 5
     name = "LShoulder"
        [[pose.B25_UPPER.children.children.children]]
        id = 6
        name = "LElbow"
           [[pose.B25_UPPER.children.children.children.children]]
           id = 7
           name = "LWrist"


[pose.B25_UPPER_BODY]
name = "CHip"
id = 8
  [[pose.B25_UPPER_BODY.children]]
  id = 9
  name = "RHip"
  [[pose.B25_UPPER_BODY.children]]
  id = 12
  name = "LHip"
  [[pose.B25_UPPER_BODY.children]]
  id = 17
  name = "Neck"
     [[pose.B25_UPPER_BODY.children.children]]
     id = 0
     name = "Nose"
     [[pose.B25_UPPER_BODY.children.children]]
     id = 2
     name = "RShoulder"
        [[pose.B25_UPPER_BODY.children.children.children]]
        id = 3
        name = "RElbow"
           [[pose.B25_UPPER_BODY.children.children.children.children]]
           id = 4
           name = "RWrist"
     [[pose.B25_UPPER_BODY.children.children]]
     id = 5
     name = "LShoulder"
        [[pose.B25_UPPER_BODY.children.children.children]]
        id = 6
        name = "LElbow"
           [[pose.B25_UPPER_BODY.children.children.children.children]]
           id = 7
           name = "LWrist"
		   
[pose.B25_UPPER_Ears]
name = "CHip"
id = 8
  [[pose.B25_UPPER_Ears.children]]
  id = 9
  name = "RHip"
  [[pose.B25_UPPER_Ears.children]]
  id = 12
  name = "LHip"
  [[pose.B25_UPPER_Ears.children]]
  id = 1
  name = "Neck"
     [[pose.B25_UPPER_Ears.children.children]]
     id = 0
     name = "Nose"
		[[pose.B25_UPPER_Ears.children.children.children]]
		id = 15
		name = "REye"
			[[pose.B25_UPPER_Ears.children.children.children.children]]
			id = 17
			name = "REar"
		[[pose.B25_UPPER_Ears.children.children.children]]
		id = 16
		name = "LEye"
			[[pose.B25_UPPER_Ears.children.children.children.children]]
			id = 18
			name = "LEar"
     [[pose.B25_UPPER_Ears.children.children]]
     id = 2
     name = "RShoulder"
        [[pose.B25_UPPER_Ears.children.children.children]]
        id = 3
        name = "RElbow"
           [[pose.B25_UPPER_Ears.children.children.children.children]]
           id = 4
           name = "RWrist"
     [[pose.B25_UPPER_Ears.children.children]]
     id = 5
     name = "LShoulder"
        [[pose.B25_UPPER_Ears.children.children.children]]
        id = 6
        name = "LElbow"
           [[pose.B25_UPPER_Ears.children.children.children.children]]
           id = 7
           name = "LWrist"
